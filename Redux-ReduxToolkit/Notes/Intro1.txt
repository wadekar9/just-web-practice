## Three Code Concepts
---> (1) Store
     (2) Action
     (3) Reducer

---> A "Store" that holds the state of your application.
---> An "Action" that describes what happened in the application.
---> A "Reducer" which handles the action and decides how to update the state.


## Three Principles
---> (1) The global state of your application is stored as an object insider a single store.
     (2) The only way to change the state is to dispatch an action, an object that describes what happened.
     (3) To specify how the state tree is updated based on actions, you write pure reducers.


              ----------------             --------             ---------              -------------             ----------------
    -------->| Javascript App | --------> | Action | --------> | Reducer | <--------> | Redux Store | --------> | Javascript App |
              ----------------             --------             ---------              -------------             ----------------

        
## Actions : 
---> The only way your application can interact with the store.
---> Carry some information from your app to the redux store.
---> Plain javascript objects.
---> Have a 'type' property that describes something that happened in the application.
---> The 'type' property is typically defined as string constants.

## Reducers : 
---> Specify how the app's state changes in response to actions sent to the store.
---> Functions that accepts state and action as arguments, and returns the next state of the application.
---> Ex. (prevState, action) => newState

## Redux Store :
---> One store for the entire application
---> #Responsiblities : 
     ---> Holds application state globally
     ---> Allows access to state via getState()
     ---> Allows state to be updated via dispatch(action)
     ---> Registers listeners via subscribe(listener)
     ---> Handles unregistering of listeners via the function returned by subscribe(listener)